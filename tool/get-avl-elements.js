const { ok } = require("assert");

const { JSDOM } = require("jsdom");
const fetch = require("node-fetch");

function nameToVar(name) {
  return name
    .toUpperCase()
    .replace(/\s+/g, "_")
    .replace(/[^A-Z0-9_]/g, "");
}

function testElement(element) {
  ok(Object.keys(element).length == 11);
  const {
    id,
    name,
    bytes,
    type,
    minValue,
    maxValue,
    multiplier,
    unit,
    values,
    devices,
    groups,
  } = element;
  ok(Number.isInteger(id));
  ok(typeof name == "string" && name.trim().length);
  ok(Number.isInteger(bytes) || bytes === null);
  ok(
    (typeof type == "string" &&
      type.length &&
      !/\s/.test(type) &&
      type.toLowerCase() == type) ||
      type === null
  );
  ok(Number.isInteger(minValue) || minValue === null);
  ok(Number.isInteger(maxValue) || maxValue === null);
  ok(Number.isFinite(multiplier));
  ok((typeof unit == "string" && unit.trim().length) || unit === null);
  ok(
    Object.entries(values).every(
      ([k, v]) =>
        Number.isInteger(Number(k)) &&
        Number(k) >= 0 &&
        typeof v == "string" &&
        v.trim().length
    )
  );
  ok(Array.isArray(devices) && devices.every((d) => d.length && !/\s/.test(d)));
  ok(
    Array.isArray(groups) &&
      groups.every((g) => typeof g == "string" && g.trim().length)
  );
}

async function main() {
  const url =
    "https://wiki.teltonika-gps.com/view/Template:Teltonika_Data_Sending_Parameters_ID";
  const { document } = new JSDOM(await (await fetch(url)).text()).window;
  const elements = {};
  const ids = {};
  for (const table of document.querySelectorAll("table")) {
    for (const row of table.querySelectorAll("tr")) {
      if (row.querySelector("th")) continue;
      const data = Array.from(row.querySelectorAll("td"), (c) =>
        c.querySelector(".mw-collapsible")
          ? c.querySelector(".mw-collapsible").textContent.trim()
          : c.textContent.trim()
      );
      const id = Number(data[0]);
      const name = data[1]
        .replace("Acitivity", "Activity")
        .replace("Duratation", "Duration");
      ids[nameToVar(name)] = id;
      const bytes = Number(data[2]) || null;
      const type =
        data[3] == "-"
          ? null
          : data[3].toLowerCase().replace("long int", "").trim();
      const minValue = data[4] == "-" ? null : Number(data[4]);
      const maxValue = data[5] == "-" ? null : Number(data[5]);
      const multiplier = Number(data[6]) || 1;
      const unit = data[7] == "-" || !data[7].trim() ? null : data[7];
      let isSwappedValue = null;
      const rangeRegex = /^[0-9]+-[0-9]+$/;
      let values = Object.fromEntries(
        data[8]
          .split("\n")
          .map((l) => {
            const parts = l.split(/\s+[-\u2013]\s+/).map((p) => p.trim());
            if (parts.length != 2) return;
            if (isSwappedValue == null)
              isSwappedValue = /^[0-9]+$/.test(parts[1]);
            let numberIdx = isSwappedValue ? 1 : 0;
            let labelIdx = isSwappedValue ? 0 : 1;
            const isRange = rangeRegex.test(parts[numberIdx]);
            if (isRange) return [parts[numberIdx], parts[labelIdx]];
            const number = parseInt(parts[numberIdx].replace(/^if /, ""));
            if (isNaN(number)) return;
            const label = parts[labelIdx];
            return [number, label];
          })
          .filter(Boolean)
      );
      for (const [k, v] of Object.entries(values)) {
        if (rangeRegex.test(k)) {
          delete values[k];
          const [start, end] = k.split("-").map(Number);
          for (let i = start; i <= end; i++) values[i] = v;
        }
      }
      const devices = data[9]
        .split("\n")
        .map((l) => l.trim())
        .filter((l) => l && !l.includes("[Expand]"));
      const groups = data[10].split(",").map((g) => g.trim());
      const element = {
        id,
        name,
        bytes,
        type,
        minValue,
        maxValue,
        multiplier,
        unit,
        values,
        devices,
        groups,
      };
      testElement(element);
      elements[id] = element;
    }
  }
  elements[ids.GREEN_DRIVING_VALUE].multiplier = 0.01;
  console.log("// This file is automatically generated. Do not modify.");
  console.log(`module.exports.ids = ${JSON.stringify(ids, null, 2)};`);
  console.log();
  console.log(
    `module.exports.elements = ${JSON.stringify(elements, null, 2)};`
  );
}

main();
