import { JSDOM } from "jsdom";
import fetch from "node-fetch";

function nameToVar(name) {
  return name
    .toUpperCase()
    .replace(/\s+/g, "_")
    .replace(/[^A-Z0-9_]/g, "")
    .replace(/_+/g, "_");
}

async function main() {
  const url =
    "https://wiki.teltonika-gps.com/view/Template:FMB_Device_Family_Parameter_list";
  const { document } = new JSDOM(await (await fetch(url)).text()).window;
  const ids = {};
  let prefix;
  for (const el of document.querySelectorAll("h2,h3,table")) {
    if (el.tagName == "H2" || el.tagName == "H3") {
      prefix = el.textContent
        .replace(/parameters|settings|operator code|list/gi, "")
        .trim();
      continue;
    }
    if (
      [
        "OBD II (Bluetooth)",
        "LVCAN",
        "RS232/RS485",
        "Custom Vehicle Types",
      ].includes(prefix)
    )
      continue;
    const rows = el.querySelectorAll("tr");
    for (let i = 0; i < rows.length; i++) {
      const row = rows[i];
      const cols = row.querySelectorAll("th,td");
      const span = cols[0].getAttribute("rowspan");
      const skip = i == 0;
      if (span) i += span - 1;
      const data = Array.from(cols, (c) => c.textContent.trim());
      if (data.length < 5) continue;
      if (skip) {
        if (cols[0].textContent.trim() == "Mode") break;
        continue;
      }
      let paramName = data[data.length - 1];
      const isSendSMS = /Send SMS/i.test(paramName);
      const isSMSText = /SMS Text/i.test(paramName);
      if (prefix == "I/O") {
        if (isSendSMS || isSMSText) {
          const type = rows[i - (isSendSMS ? 1 : 2)]
            .querySelectorAll("th,td")[5]
            .textContent.replace(/event only|average|low level/i, "")
            .trim();
          paramName = `${type} ${paramName}`;
        }
      } else {
        if (isSendSMS) {
          paramName = `${rows[i + 1]
            .querySelectorAll("th,td")[2]
            .textContent.trim()} ${paramName}`;
        } else if (isSMSText) {
          paramName = `${data[2]} ${paramName}`;
        }
      }
      const id = Number(data[0].split("-")[0]);
      if (
        prefix == "Bluetooth" &&
        paramName == "Security mode" &&
        [803, 807].includes(id)
      ) {
        paramName = `${id == 803 ? "Local" : "External"} ${paramName}`;
      }
      paramName = paramName
        .replace(new RegExp(prefix, "i"), "")
        .replace(/weekly schedule/i, "");
      if (isNaN(id)) throw new Error(`Could not parse id ${data[0]}`);
      const name = nameToVar(`${prefix}_${paramName}`);
      if (name in ids) throw new Error(`name ${name} already exists`);
      ids[name] = id;
    }
  }
  console.log("// This file is automatically generated. Do not modify.");
  console.log(`module.exports.ids = ${JSON.stringify(ids, null, 2)};`);
}

main();
